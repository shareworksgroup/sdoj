@using SdojWeb.Infrastructure.Extensions
@model SdojWeb.Models.QuestionGroupEditModel
@{
    ViewBag.Title = "新题目组";
    var editMode = Model.Id != 0;
    ViewBag.Title = editMode ? "编辑题目组" : "新题目组";
}
<h2>@ViewBag.Title</h2>
<div class="form-horizontal">
    <h4></h4>
    <hr />
    <form id="main-form">
        @Html.AntiForgeryToken()
        @Html.EditorForModel()
    </form>

    <div class="form-group">
        <label class="col-md-2 control-label">题目列表</label>
        <div class="col-md-10">
            <form class="search-form"
                  data-ajax="true" data-ajax-url="@Url.Action("Question")" data-ajax-method="POST" data-ajax-mode="replace"
                  data-ajax-update="#question-table" data-ajax-success="on_question_page_loaded()">
                @Html.AntiForgeryToken()
                <div class="col-xs-12 col-sm-6 col-md-4 col-lg-3">
                    <input class="form-control input-sm" name="name" placeholder="标题..." />
                </div>
                <div class="col-xs-12 col-sm-6 col-md-4 col-lg-3">
                    <input class="form-control input-sm" name="creator" placeholder="作者..." />
                </div>
                <div class="col-xs-12 col-sm-6 col-md-4 col-lg-3">
                    <button class="btn btn-default btn-sm" type="submit">过滤</button>
                </div>
            </form>
        </div>
        <div class="col-md-offset-2 col-md-10">
            <div class="row" id="question-table">
                @Html.Partial("_Question", ViewData["Question"], ViewData)
            </div>
        </div>
    </div>
    <form id="question-group-form">
        <div class="row">
            <label class="col-md-2 control-label">题目组</label>
            <div class="col-md-10">
                <button type="button" class="btn btn-info btn-xs" style="margin-bottom:5px;" data-bind="click: arrange_order">
                    <i class="glyphicon glyphicon-adjust"></i>
                    整理顺序
                </button>
                <div class="table-responsive">
                    <table class="table table-bordered table-condensed table-hover table-striped">
                        <thead>
                            <tr>
                                <th>Id</th>
                                <th>题目名</th>
                                <th>作者</th>
                                <th>别名</th>
                                <th>顺序</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody data-bind="foreach: items">
                            <tr>
                                <td data-bind="text: questionId"></td>
                                <td>
                                    <span data-bind="text: name"></span>
                                </td>
                                <td>
                                    <span data-bind="text: author"></span>
                                </td>
                                <td>
                                    <input name="alias" class="form-control input-sm" data-bind="value: alias, attr: {'name': 'alias-' + $data.questionId}"
                                           type="text" maxlength="20" />
                                </td>
                                <td>
                                    <input name="order" class="form-control input-sm" data-bind="value: order, attr: {'name': 'order-' + $data.questionId}"
                                           type="number" data-rule-required="true" data-rule-number="true" />
                                </td>
                                <td>
                                    <button data-bind="click: $parent.remove_question_item.bind($parent, $data)"
                                            class="btn btn-warning btn-xs btn-block text-center" type="button">
                                        <i class="glyphicon glyphicon-remove"></i>
                                        删除
                                    </button>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </form>
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            @if (editMode)
            {
                <button data-bind="click: save, css: {'disabled': state() == StateBusy}" class="btn btn-primary">
                    <i class="glyphicon glyphicon-save"></i>
                    保存
                </button>
            }
            else
            {
                <button data-bind="click: save, css: {'disabled': state() == StateBusy}" class="btn btn-primary">
                    <i class="glyphicon glyphicon-plus"></i>
                    创建
                </button>
            }
            <span id="save-state" style="display: none;" data-bind="text: stateName"></span>
        </div>
    </div>
</div>
<div>
    @Html.ActionLink("返回列表", "Index")
    @if (editMode)
    {
        @Html.Raw(" | ")
        @Html.ActionLink("查看详情", "Details", new { id = Model.Id }, new { target = "_black" })
    }
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/ko")
    @Scripts.Render("~/bundles/jqueryajax")
    <script>
        var StateIdle = 0;
        var StateBusy = 1;
        var StateError = 2;
        var StateValidError = 3;

        function ViewModel() {
            var self = this;
            var prototype = ViewModel.prototype;
            this.state = ko.observable(StateIdle);
            this.id = @Model.Id;

            var injson = @Html.Json(Model.Questions);
            this.items = ko.observableArray(ko.utils.arrayMap(injson, function(item){
                var target = new QuestionItem();
                target.questionId = item.questionId;
                target.id = item.id;
                target.name = item.name;
                target.author = item.author;
                target.alias = ko.observable(item.alias);
                target.order = ko.observable(item.order);
                return target;
            }));

            this.maxOrder = ko.computed(function() {
                var items = self.items();
                if (items.length == 0) {
                    return 0;
                } else {
                    var max = items[0].order();
                    for (var i = 1; i < items.length; ++i) {
                        max = Math.max(items[i].order(), max);
                    }
                    return max;
                }
            });

            prototype.stateName = ko.computed(function() {
                var prefix = '@Html.Raw(editMode ? "保存" : "创建")';
                switch(self.state())
                {
                    case StateIdle:
                        return prefix + "成功。";
                    case StateError:
                        return prefix + "失败！";
                    case StateValidError:
                        return "验证失败，请修正表单信息！";
                }
            });

            prototype.save = function() {
                var $form1 = $("#main-form");
                var $form2 = $("#question-group-form");
                if ($form1.valid() && $form2.valid()) {
                    var data = {};
                    $form1.serializeArray().map(function (x) { data[x.name] = x.value });
                    data['questions'] = ko.toJS(self.items());

                    self.state(StateBusy);
                    var url = '@Html.Raw(editMode ? Url.Action("Edit") : Url.Action("Create"))';
                    $.ajax(url, {
                        type: "POST",
                        data: data,
                        tranditional: true,
                        complete: self.show_state(),
                        success: function() {
                            self.state(StateIdle);
                        },
                        error: function() {
                            self.state(StateError);
                        }
                    });
                } else {
                    // valid failed.
                    self.state(StateValidError);
                    self.show_state();
                }
            }

            prototype.show_state = function() {
                $("#save-state").fadeIn(300, function() {
                    $("#save-state").fadeOut(3000);
                });
            }

            prototype.arrange_order = function() {
                console.log(ko.toJS(self.items));
                self.items.sort(function(item1, item2) {
                    return item1.order() - item2.order();
                });
                console.log(ko.toJS(self.items));
                for (var i = 0; i < self.items().length; ++i) {
                    self.items()[i].order(i+1);
                }
                console.log(ko.toJS(self.items));
            }

            prototype.refresh_question_list = function() {
                var ids = ko.utils.arrayMap(self.items(), function (item) {
                    return item.questionId;
                });

                $(".add-question-button").each(function (id, element) {
                    var that = $(element);
                    var thatId = that.data('id');

                    if (ids.indexOf(thatId) !== -1) {
                        $(element).hide();
                    } else {
                        $(element).show();
                    }
                });
            }

            prototype.remove_question_item = function (item) {
                this.items.remove(item);
                this.refresh_question_list();
            }
        }

        function QuestionItem() {
            var self = this;

            this.id = null;
            this.questionId = null;
            this.name = "";
            this.author = "";
            this.alias = ko.observable("");
            this.order = ko.observable(0);
        }

        function add_question_item() {
            var that = $(this);

            var id = that.data('id');
            var name = that.data('name');
            var author = that.data('creator');

            var item = new QuestionItem();
            item.id = vm.id;
            item.questionId = id;
            item.name = name;
            item.author = author;
            item.order(vm.maxOrder()+1);

            vm.items.push(item);
            vm.refresh_question_list();
        }



        function on_question_page_loaded() {
            vm.refresh_question_list();
        }

        var vm = new ViewModel();
        ko.applyBindings(vm);
        vm.refresh_question_list();

        $(document).ready(function(){
            $("#main-form").validate();
            $("#question-group-form").validate();
        })
    </script>
}
