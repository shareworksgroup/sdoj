@using System.Security.Principal
@using PagedList.Mvc
@using SdojWeb.Infrastructure.Extensions
@using SdojWeb.Infrastructure.Identity
@using SdojWeb.Models
@using Microsoft.AspNet.Identity

@model IEnumerable<SolutionSummaryModel>

@{
    ViewBag.Title = "解答列表";

    Func<int, int, bool> checkAccess = (authorId, questionCreatorId) =>
    {
        IPrincipal user = User;
        IIdentity identity = user.Identity;
        int userId = identity.GetUserId<int>();

        if (userId == authorId ||
            userId == questionCreatorId ||
            user.IsInRole(SystemRoles.QuestionAdmin))
        {
            return true;
        }
        return false;
    };

    var paged = Model as SortablePagedList<SolutionSummaryModel>;
    var route = (RouteValueDictionary)ViewBag.Route;
    var thb = paged.GetThBuilder(Html, "Index", route);

}

<h2>@ViewBag.Title</h2>

<form class="search-form">
    <div class="col-xs-12 col-sm-6 col-md-4 col-lg-3">
        <input name="id" type="number" value="@route["id"]" class="form-control input-sm" placeholder="ID..." />
    </div>
    @if (User.Identity.IsAuthenticated)
    {
        <div class="col-xs-12 col-sm-6 col-md-4 col-lg-3">
            <select class="form-control input-sm" data-bind="value: onlyMe" name="onlyMe">
                <option value="">所有解答...</option>
                <option value="True">仅看我的解答</option>
            </select>
        </div>
    }
    <div class="col-xs-12 col-sm-6 col-md-4 col-lg-3">
        @Html.TextBox("username", route["username"], new { @class = "form-control input-sm", placeholder = "用户名..." })
    </div>
    <div class="col-xs-12 col-sm-6 col-md-4 col-lg-3">
        @Html.TextBox("question", route["question"], new { @class = "form-control input-sm", placeholder = "题目名..." })
    </div>
    <div class="col-xs-12 col-sm-6 col-md-4 col-lg-3">
        @Html.EnumDropDownList("language", (Languages?)route["language"], "语言...", new { @class = "form-control input-sm" })
    </div>
    <div class="col-xs-12 col-sm-6 col-md-4 col-lg-3">
        @Html.EnumDropDownList("state", (SolutionState?)route["state"], "状态...", new { @class = "form-control input-sm" })
    </div>
    <div class="col-xs-12 col-sm-6 col-md-4 col-lg-3">
        <button type="submit" class="btn btn-default btn-sm">过滤</button>
    </div>
</form>

<div class="row">
    <div class="col-xs-12">
        <div class="table-responsive">
            <table class="table table-hover table-striped table-bordered table-condensed">
                <thead>
                    <tr>
                        <th>
                            @Html.DisplayNameFor(x => x.Id)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.CreateUserName)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.QuestionName)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Language)
                        </th>
                        <th>
                            @thb.BuildA(x => x.SourceLength)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.State)
                        </th>
                        <th>
                            @thb.BuildA(x => x.RunTime)
                        </th>
                        <th>
                            @thb.BuildA(x => x.UsingMemoryMb)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.SubmitTime)
                        </th>
                        <th>源代码</th>
                        <th colspan="2">操作</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>
                                @Html.DisplayFor(x => item.Id)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.CreateUserName)
                            </td>
                            <td>
                                @Html.ActionLink(item.QuestionName, "Details", "Question", new { id = item.QuestionId }, null)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Language)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.SourceLength)
                            </td>
                            <td id="state-@item.Id">
                                @if (checkAccess(item.CreateUserId, item.QuestionCreateUserId))
                                {
                                    if (item.State == SolutionState.CompileError)
                                    {
                                        <a href="javascript:void(0);" data-bind="click: showCompilerOutput.bind($data, @item.Id)">
                                            @Html.DisplayFor(x => item.State)
                                        </a>
                                    }
                                    else if (item.State == SolutionState.WrongAnswer)
                                    {
                                        <a href="javascript:void(0);" data-bind="click: showWrongAnswer.bind($data, @item.Id)">
                                            @Html.DisplayFor(x => item.State)
                                        </a>
                                    }
                                    else
                                    {
                                        @Html.DisplayFor(modelItem => item.State)
                                    }
                                }
                                else
                                {
                                    @Html.DisplayFor(modelItem => item.State)
                                }
                            </td>
                            <td id="runtime-@item.Id">
                                @Html.DisplayFor(modelItem => item.RunTime)
                            </td>
                            <td id="memory-@item.Id">
                                @Html.DisplayFor(modelItem => item.UsingMemoryMb)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.SubmitTime)
                            </td>
                            <td>
                                @if (checkAccess(item.CreateUserId, item.QuestionCreateUserId) || User.IsInRole(SystemRoles.SolutionViewer))
                                {
                                    <a class="btn btn-primary btn-xs btn-block" data-toggle="modal" data-target="#source-code-modal"
                                       data-bind="click: loadcode.bind($data, @item.Id)">
                                        <i class="glyphicon glyphicon-file"></i>
                                        源码
                                    </a>
                                }
                            </td>
                            <th>
                                @if (User.IsUserOrRole(item.QuestionCreateUserId, SystemRoles.QuestionAdmin))
                                {
                                    <button class="btn btn-warning btn-block btn-xs" data-bind="click: rejudge.bind($data, @item.Id)">
                                        <i class="glyphicon glyphicon-repeat"></i>
                                        重新评测
                                    </button>
                                }
                            </th>
                            <th>
                                @if (User.IsUserOrRole(item.QuestionCreateUserId, SystemRoles.QuestionAdmin))
                                {
                                    <button class="btn btn-danger btn-block btn-xs" data-bind="click: deleteMe.bind($data, @item.Id)">
                                        <i class="glyphicon glyphicon-remove"></i>
                                        删除
                                    </button>
                                }
                            </th>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@Html.Partial("_SourceModal")
@Html.Partial("_CompilerOutputModal")

<div class="row">
    <div class="col-xs-6">
        第 @paged.PageNumber 页，共 @paged.PageCount 页
    </div>
    <div class="col-xs-6">
        <div class="pull-right">
            @Html.PagedListPager(paged, page => Url.Action("Index", route.CopySetPaged(page, paged.OrderBy, paged.Asc)))
        </div>
    </div>
</div>
@using (Html.BeginForm("Delete", "Solution", FormMethod.Post, new { id = "delete-form" }))
{
    @Html.AntiForgeryToken()
    <input type="hidden" name="id" />
}
@using (Html.BeginForm("ReJudge", "Solution", FormMethod.Post, new { id = "rejudge-form" }))
{
    @Html.AntiForgeryToken()
    <input type="hidden" name="id" />
}
@section scripts
{
    @Scripts.Render("~/bundles/signalr")
    <script src="~/signalr/hubs"></script>
    @Scripts.Render("~/bundles/ko")
    <script>
        function ViewModel() {
            var self = this;
            self.onlyMe = '@route["onlyMe"]';
            self.code = ko.observable();
            self.compilerOutput = ko.observable();
            self.solutionId = ko.observable();

            self.loadcode = function (id) {
                self.code('加载中...');
                self.solutionId(id);

                $.get("@Url.Action("Source")" + "/" + id, function (data) {
                    self.code(data.replace(new RegExp("\t", "g"), "    "));
                    self.solutionId(id);
                });
            };
            self.rawCode = function () {
                var url = '@Url.Action("Source", "Solution")' + '/' + self.solutionId();
                window.open(url);
            };
            self.deleteMe = function (id) {
                if (confirm('确定要删除此解答吗？')) {
                    $("#delete-form input[name='id']").val(id);
                    $("#delete-form").submit();
                }
            };
            self.rejudge = function (id) {
                if (confirm('确定开始重新评测？')) {
                    var form = $("#rejudge-form");
                    form.find("input[name='id']").val(id);
                    var url = form.attr('action');
                    $.post(url, form.serialize());

                }
            };
            self.showCompilerOutput = function (id) {
                $("#compiler-modal").modal();
                self.compilerOutput('加载中...');
                self.solutionId(id);
                $.post("@Url.Action("CompilerOutput")" + "/" + id, function (data) {
                    self.compilerOutput(data);
                });
            };
            self.showWrongAnswer = function (id) {
                $("#compiler-modal").modal();
                self.compilerOutput('加载中...');
                self.solutionId(id);
                $.post("@Url.Action("WrongAnswer")" + "/" + id, function (data) {
                    if (data.Exists) self.compilerOutput("输入：" + data.Input + "\r\n" + "你的输出（错误）：" + data.Output);
                    else self.compilerOutput("<数据不存在或已删除。>");
                });
            }
        };

        var shub = $.connection.solutionHub;
        shub.client.push = function (id, name, runtime, memory) {
            $("#runtime-" + id).text(runtime);
            $("#memory-" + id).text(memory.toFixed(2));

            $("#state-" + id).text(name);
        };
        $.connection.hub.start();

        var vm = new ViewModel();
        ko.applyBindings(vm);

    </script>
}